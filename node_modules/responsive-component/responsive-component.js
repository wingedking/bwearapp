"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // ResponsiveComponent coded by Yevgeniy Skroznikov
// MIT License


var ResponsiveComponent = function (_Component) {
    _inherits(ResponsiveComponent, _Component);

    function ResponsiveComponent(props) {
        _classCallCheck(this, ResponsiveComponent);

        return _possibleConstructorReturn(this, (ResponsiveComponent.__proto__ || Object.getPrototypeOf(ResponsiveComponent)).call(this, props));
    }

    _createClass(ResponsiveComponent, [{
        key: "handleBreakpoints",
        value: function handleBreakpoints() {
            var width = window.innerWidth;
            var height = window.innerHeight;
            var breakpoint = void 0,
                lowestwbp = void 0,
                lowesthbp = void 0;

            if (this.breakpoints === undefined) return;

            var newStyle = this.insertStyle.call(this, {}, this.breakpoints.default());

            if (this.breakpoints.test) console.log("responsive width(px): " + width + " height(px): " + height);

            function handleMax(selection) {
                var lowestbp = void 0;
                if (this.breakpoints["max" + selection] !== undefined) {
                    var breaks = Object.keys(this.breakpoints["max" + selection]);
                    for (var i = breaks.length - 1; i >= 0; i--) {
                        breakpoint = parseInt(breaks[i]);
                        if (selection === "Width") {
                            if (breakpoint <= width) break;
                        } else if (breakpoint <= height) break;
                        lowestbp = breakpoint;
                        var styleChange = this.breakpoints["max" + selection][breaks[i]]();
                        console.log("style change");
                        if (styleChange !== undefined) newStyle = this.insertStyle.call(this, newStyle, styleChange);
                    }
                }
                return lowestbp;
            }

            lowestwbp = handleMax.call(this, "Width");
            lowesthbp = handleMax.call(this, "Height");

            if (Object.keys(newStyle).length !== undefined) {
                if (this.breakpoints.test) {
                    console.log("changing a style: ");
                    console.log(newStyle);
                }
                this.breakpoints.newState(newStyle, lowestwbp, lowesthbp);
            }
        }
    }, {
        key: "insertStyle",
        value: function insertStyle(currentStyle, change) {
            var newStyle = Object.assign({}, currentStyle);
            function obj(object) {
                function changeStyle(style) {
                    newStyle[object][style] = change[object][style];
                }
                if (newStyle[object] === undefined) {
                    var objectStyles = Object.assign({}, this.state[object]);
                    newStyle = Object.assign({}, newStyle, _defineProperty({}, object, objectStyles));
                }
                Object.keys(change[object]).forEach(changeStyle.bind(this));
            }
            Object.keys(change).forEach(obj.bind(this));
            return newStyle;
        }
    }, {
        key: "componentWillMount",
        value: function componentWillMount() {
            this.breakpoints = this.response();
            this.handleBreakpoints.call(this);
            window.addEventListener("resize", this.handleBreakpoints.bind(this));
        }
    }]);

    return ResponsiveComponent;
}(_react.Component);

exports.default = ResponsiveComponent;